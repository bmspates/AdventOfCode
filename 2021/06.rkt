#lang racket
(require "input.rkt" "utils.rkt")
(provide main)

(define (main)
  (let ((input (string->int-list "," (car (read-lines "inputs/day6test.txt")))))
    (values (solve input 80)
            (solve input 256))))

(define (solve input days)
  (define b (box 0))
  (define (helper h i)
    (if (= i days)
        (void)
        (begin (let ((x (hash-ref h i 0)))
                 (hash-update! h (+ 7 i) (λ (n) (+ x n)) 0)
                 (hash-update! h (+ 9 i) (λ (n) (+ x n)) 0)
                 (set-box! b (+ (unbox b) x)))
               (helper h (add1 i)))))
  (define h (make-hash))
  (for/list ([x input])
    (hash-update! h x add1 0)
    (set-box! b (add1 (unbox b))))
  (helper h 0)
  (unbox b))
